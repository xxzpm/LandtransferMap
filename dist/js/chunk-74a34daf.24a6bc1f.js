(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-74a34daf"],{"592c":function(e,t,r){"use strict";function n(e,t){let r=e.length-t,n=0;do{for(let r=t;r>0;r--)e[n+t]+=e[n],n++;r-=t}while(r>0)}function i(e,t,r){let n=0,i=e.length;const o=i/r;while(i>t){for(let r=t;r>0;--r)e[n+t]+=e[n],++n;i-=t}const a=e.slice();for(let c=0;c<o;++c)for(let t=0;t<r;++t)e[r*c+t]=a[(r-t-1)*o+c]}function o(e,t,r,o,a,c){if(!t||1===t)return e;for(let n=0;n<a.length;++n){if(a[n]%8!==0)throw new Error("When decoding with predictor, only multiple of 8 bits are supported.");if(a[n]!==a[0])throw new Error("When decoding with predictor, all samples must have the same size.")}const s=a[0]/8,l=2===c?1:a.length;for(let d=0;d<o;++d){if(d*l*r*s>=e.byteLength)break;let o;if(2===t){switch(a[0]){case 8:o=new Uint8Array(e,d*l*r*s,l*r*s);break;case 16:o=new Uint16Array(e,d*l*r*s,l*r*s/2);break;case 32:o=new Uint32Array(e,d*l*r*s,l*r*s/4);break;default:throw new Error(`Predictor 2 not allowed with ${a[0]} bits per sample.`)}n(o,l,s)}else 3===t&&(o=new Uint8Array(e,d*l*r*s,l*r*s),i(o,l,s))}return e}r.d(t,"a",(function(){return a}));class a{async decode(e,t){const r=await this.decodeBlock(t),n=e.Predictor||1;if(1!==n){const t=!e.StripOffsets,i=t?e.TileWidth:e.ImageWidth,a=t?e.TileLength:e.RowsPerStrip||e.ImageLength;return o(r,n,i,a,e.BitsPerSample,e.PlanarConfiguration)}return r}}},9697:function(e,t,r){"use strict";r.r(t),r.d(t,"default",(function(){return i}));var n=r("592c");class i extends n["a"]{decodeBlock(e){return e}}}}]);
//# sourceMappingURL=chunk-74a34daf.24a6bc1f.js.map